# -*- coding: utf-8 -*-
"""Copy of PythonLab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-bPBPnPfoxgPmFgwX0c63ckLruCy4MO6

# Week 1
## Exception Handling and User defined exception(s)

**a) Write a python program to catch following exception**

**i) Value Error**
"""

try:
    a=int(input("Enter the value "))
    print(a)
except ValueError as z:
    print("Enter valid number ",z)
else:
    print("success ")

"""**ii) Index Error**"""

try:
    a=[1,2,3]
    a[5]
except IndexError as e:
    print("index out of range ",e)
else:
    print("success")

"""**iii) Name Error**"""

try:
    print(x)
except NameError as e:
    print("it is name error,",e)
else:
    print("success")

"""**iv) Type Error**"""

try:
    a=10
    b="satyavanth"
    c=a+b
except TypeError as e:
    print("It is type error,",e)
else:
    print("sucess")

"""**v) DivideZero Error**"""

try:
    a=10
    b=0
    c=a/b
except ZeroDivisionError as e:
    print("it is zero division error,",e)
else:
    print("sucess")

"""**b) Write a python program to create user defined exceptions.**"""

class MarksException(Exception):
    pass
class InvalidMarksException(Exception):
    pass
marks = int(input("Enter the marks :"))
try:
    if(marks<75):
        raise MarksException
    elif(marks>100):
        raise InvalidMarksException
    else:
        print("You have qualified the test")
except MarksException:
    print("sorry, you are not qualified")
except InvalidMarksException:
    print("you have entered the invalid marks")

"""**c) Write a python program to understand the use of else and finally block with try block.**"""

class ISBException(Exception):
    pass
def checkBalance():
    curr_bal=int(input("Enter existing amount : "))
    withDraw_amt=int(input("Enter amount to with draw : "))
    balance=curr_bal-withDraw_amt
    try:
        if(balance<1000):
            raise ISBException
        print(balance)
    except ISBException:
        print("insufficient balance")
    finally:
        print("checking balance completed")
        print("if you want to check balance again press y otherwise press n ")
        a=input("enter any key : ")
        if(a=='n'):
            print("completed")
        else:
            checkBalance()
checkBalance()

"""**d) Write a python program that uses raise and exception class to throw an exception.**"""

class SmallException(Exception):
    pass
class LargeException(Exception):
    pass
number=input("enter a phone number : ")

c=len(number)

try:
    if(c<10):
        raise SmallException
    elif(c>10):
        raise LargeException
    elif(c==10):
        print("you have entered the correct form of phone number ")

except SmallException:
    print("given number has less than 10 digits .So, please enter number with 10 digits")
except LargeException:
    print("given number has more than 10 digits .So, please enter number with 10 digits")

"""# Week 2
## Modules and Packages

**a) Write a python program to create a module and import the module in another python program.**
"""

import airthematicOperations as ao
ao.add(6,5)

import airthematicOperations as ao
ao.sub(6,5)

"""**b) Write a python program to import all objects from a module, specific objects from module and provide custom import name to the imported object from the module.**"""

# importing of all the ojects of the module
from airthematicOperations import*
add(5,3)

# importing the single object of the module
from airthematicOperations import add
add(5,3)

"""**c) Create a python package having at least two modules in it.**"""

from satyavanth import factorial as f
print("factorial is ",f.fac(5))

from satyavanth.Swap import swap
swap(4,5)

"""**d) Create a python package having at least one subpackage in it.**"""

from hello.cse.satya import c
c()

from hello.cse.project import*
b()

from hello import hi as h
h.a()

"""# Week 3
## Numpy Library

**a) Create a numpy array from list, tuple with float type**
"""

import numpy as np

a = np.array([10, 20, 30], dtype=float)
print("The float list is : ")
print(a)

b = np.array([1, 2, 3, 4], dtype=int)
print("The integer list is : ")
print(b)

d = np.array((10, 20, 30), dtype=float)
print("The float tuple is : ")
print(d)

f = np.array((1, 2, 0, 4), dtype=bool)
print("The boolean tuple is : ")
print(f)

"""**b) Python program to demonstrate slicing, integer and boolean array indexing**"""

import numpy as np

l1 = [1, 2, 3, 0, 5, 6, 7, 8]

a = np.array(l1, dtype=int)
print("The integer array is : ")
print(a)
print("The 2 nd index value is : ", a[2])
print("The values from starting to index 1 are : ", a[0:2])
print("The complete values in array are : ", a[:])
print("The values from 5 th index to end of array are : ", a[5:])
print("The values of array from last index are : ", a[-1:-5:-1])

b = np.array(l1, dtype=bool)
print("The boolean array is : ")
print(b)
print("The 2 nd index value is : ", b[2])
print("The values from starting to index 1 are : ", b[0:2])
print("The values from 5 th index to end of array are : ", b[5:])
print("The values of array from last index are : ", b[-1:-5:-1])

"""**c) Write a python program to find min, max, sum, cumulative sum of array.**"""

import numpy as np
l1 = [1, 2, 3, 4, 5, 6, 7, 8]

a = np.array(l1, dtype=int)
print("The integer array is : ")
print(a)

print("The minimum value in the array is : ", a.min())
print("The maximum value in the array is : ", a.max())

print("The cumulative sum of elements in array is : ", a.cumsum())
print("The sum of elements in the is : ", a.sum())

"""**d) Write a python program to demonstrate use of ndim, shape, size, dtype.**"""

import numpy as np
l1 = [[1, 2], [5, 6]]

l2 = [1, 2, 3, 4]

a = np.array(l1, dtype=int)
print("The integer array is : ")
print(a)

b = np.array(l1, dtype=bool)

print("The boolean array is : ")
print(b)

print("The size of the array a is : ", a.size)

c = np.array(l2, dtype=int)

print("The shape of the array a is : ", a.shape)

print("The dimensions of the array a is : ", a.ndim)

print("The dimensions of the array c is : ", c.ndim)

print("The type of the array a is : ", type(a))

print("The type of the array b is : ", type(b))

"""# Week 4
##  Numpy Library: Linear Algebra

**a) Write a python program to find rank, determinant, and trace of an array.**
"""

import numpy as np
import numpy.linalg as la

l1 = [[1, 2], [5, 6]]

a = np.array(l1, dtype=int)
print("The matrix is: ")
print(a)

print("The trace of the given matrix is : ", np.trace(a))

print("The rank is of matrix a is ", la.matrix_rank(a))
print("The determinant of matrix a is ", la.det(a))

"""**b) Write a python program to find eigenvalues of matrices**"""

import numpy as np
import numpy.linalg as la

l2 = [[1, 2], [5, 6]]

a = np.array(l2, dtype=int)
print("The given matrix is : ")
print(a)

print("The eigen values of the given matrix are ", la.eigvals(a))

"""**c) Write a python program to find matrix and vector products (dot, inner, outer,product), matrix exponentiation.**"""

import numpy as np

import numpy.linalg as la

l1 = [[1, 2], [3, 4]]

l2 = [[5, 6], [7, 8]]

a = np.array(l1)
b = np.array(l2)
print("The matrix A is : ")
print(a)

print("The matrix B is : ")
print(b)

print("The inner product of matrix A and matrix B is ")
print(np.inner(a, b))

print("The outer product of matrix A and matrix B is ")
print(np.outer(a, b))

print("The dot product is : ")
print(np.dot(a, b))

print("The matrix exponentiation of the matrix a is :")
print(la.matrix_power(a, 3))

"""**d) Write a python program to solve a linear matrix equation, or system of linear scalar equations.**"""

import numpy as np
import numpy.linalg as la

l1 = [[5, 10], [4, 5]]
l2 = [1, 5]
a = np.array(l1)
b = np.array(l2)

print("The matrix A is :")
print(a)

print("The matrix B is :")
print(b)

print("The values after the solving of equations  : ")
print(la.solve(a, b))

"""# Week 5
## Numpy Advanced

**a) Create a white image using NumPy in Python**
"""

from PIL import Image, ImageDraw

# Create a new image with a white colour
image = Image.new("RGB", (100, 100), "black")
draw = ImageDraw.Draw(image)
# Save the image
image.save("white.png")

"""**b) Convert a NumPy array to an image and Convert images to NumPy array?**"""

# converting numpy array to image
import numpy as np
from PIL import Image

# Create a NumPy array with random values
image_array = np.random.randint(120, 220, size=(100, 100, 3), dtype=np.uint8)

# Convert the array to a PIL image
pil_image = Image.fromarray(image_array)

# Save the image to a file
pil_image.save('image.png')

# converting image to numpy array
import numpy as np
from PIL import Image

# Open an image file
image = Image.open('image.png')

# Convert the image to a NumPy array
image_array = np.asarray(image)

# Print the shape of the array
print(image_array.shape)

"""**c) Perform Sorting, Searching and Counting using Numpy methods.**"""

# searching
import numpy as np 

array = np.array([2, 5, 8, 1, 9])
print("\nINPUT ARRAY : ", array)
i = np.argmax(array)
print("Max element : ", array[i], "\n")

#np.where(a==element)
ind1 = np.where(array==5)
print(ind1)
ind2 = np.where(array==10)
print(ind2)

# Sorting
import numpy as np

a = np.array([5, 2, 8, 1, 6, 9, 3, 4, 7])

print("Actual array is ", a)
 
# Sort array indices
b = np.argsort(a)
 
# To get sorted array using sorted indices
# c is temp array created of same len as of b
c = np.zeros(len(b), dtype = int)
for i in range(0, len(b)):
    c[i]= a[b[i]]
print("Sorted array is : ", c)

# Counting
import numpy as np

arr = ["Satyavanth", "aaabbbcccc", "bbbbbbccc", "bbbdd"]

print ("arr : ", arr)

print ("Count of 'bb'", np.char.count(arr, "bb"))
print ("Count of 'bb' starting from index 2 ", np.char.count(arr, 'bb', start = 2))

"""**d) Write a program to demonstrate the use of the reshape() method**"""

import numpy as np

array1 = np.array([1,6,7,3,8,9,2,4])
print("Actual array : \n", array1)

#array with 2 rows and 4 columns
array2 = array1.reshape(2, 4)
print("\narray reshaped with 2 rows and 4 columns : \n", array2)

#array with 4 rows and 2 columns
array3 = array1.reshape(4, 2)
print("\narray reshaped with 4 rows and 2 columns : \n", array3)

"""# Week 6
## Pandas Library

**a) Write a python program to implement Pandas Series with labels**
"""

import numpy as np
import pandas as pd
print("\n")
data=np.array([10, 20, 30, 40, 50])
print(pd.Series(data)) #by default index = 0
data=pd.Series(data, index=[1,2,3,44,6]) #index is used to changing of indices
print("\n")
print(data[44])

print("\n")

list1 = [3,7,2,9]
print(pd.Series(list1))

list2 = ['a', 'b', 'c']
print(pd.Series(list2))

list3 = ['a', 2, 3.0]
print(pd.Series(list3))

print("\n")

"""**b) Create a Pandas Series from a dictionary.**"""

import numpy as np
import pandas as pd

dict = {"a":10, "b":20, "c":30}

dict2 = {"a":2, 2:"hello"}

print(pd.Series(dict))
data = pd.Series(dict) #storing the dictionary series in a part variable to access them

data2 = pd.Series(dict2)

print(data["a"])

print(data2[2])

"""**c) Creating a Pandas DataFrame.**"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)

data3 = data2.to_string(index=False)
print("\n\n\ndata frame without index values ")
print(data3)

print("\n\n")
#printing the data frame
print(data2)

"""**d) Write a program which make use of following Pandas methods**

**i) describe()**
"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)
print("\n\n")

#printing the data frame
print(data2)

print(data2.describe()) #describing the complete data of the data frame using the describe

"""**ii) head()**"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)
print("\n\n")

#printing the data frame
print(data2)

print("\nusing head")
print(data2.head()) #by default head is used to print top 5 data 

print("\nby fixing userdefined head values")
print(data2.head(2))

"""**iii) tail()**"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)
print("\n\n")

#printing the data frame
print(data2)

print("\nusing tail")
print(data2.tail())  #by default tail is used to print last 5 data 

print("\nby fixing userdefined tail values")
print(data2.tail(2))

"""# Week 7
## Pandas Library: Selection

**a) Write a program that converts Pandas DataFrame and Series into numpy.array**
"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)
print(data2) # this is data frame
print("\n\n")

list1 = [3,7,2,9]
l = pd.Series(list1) #This is series

print(l)

arr = data2.to_numpy()
print("\n")
print(arr)
print("\n")

arr2 = l.to_numpy()
print(arr2)

"""**b) Write a program that demonstrates the column selection, column addition, and column deletion.**"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)

print(data2)

print("\n\n")

print(data2["Number"])# column selection
print("\n\n")

section =[1,2,3,4,5,6]

data2['Section'] = section # addition of column

print(data2)

print("\n\n")
data2.drop(['Number'], axis=1,inplace=True)

print(data2)

print("\n")

"""**c) Write a program that demonstrates the row selection, row addition, and row deletion.**

"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)

datax = data2.loc[data2["Number"]>1234] # row selection
print(datax)

print("\n")

n = pd.DataFrame({"Roll Number":"G1", "SName":"Sai", "Email":"sai@123", "Number":12345654321}, index=[6])

#data2 = pd.concat([n,data2]) # Row addition
print("\n")
print(data2)
print("\n")

data2.drop([1,3], inplace=True) # Row deletion

print("\n")

print(data2)

print("\n")

"""**d) Get n-largest and n-smallest values from a particular column in Pandas dataFrame**"""

import numpy as np
import pandas as pd

#storing the data

data = {"Roll Number":["F2","F22","F222","a1","a2","a3"],
        "SName":["Satyavanth","satya","Satya","hello","hi","world"],
        "Email":["f2@g","f22@g","f222@g","a1@g","a2@g","a3@g"],
        "Number":[123,1234,12345,123456,12,1]}
#converting the data into data frame
data2 = pd.DataFrame(data)

print(data2.nsmallest(2, ["Number"]))
print("\n") # n-smallest
print(data2.nlargest(2,["Number"])) # n-largest

"""# Week 8
## Pandas Library: Visualization

**a) Write a program which use pandas inbuilt visualization to plot following graphs:**

**i. Bar plots**
"""

import pandas as pd

df = pd.DataFrame({'Category': ['A', 'B', 'C', 'D'], 'Values': [1, 2, 3, 4]})

df.plot(kind='bar', x='Category', y='Values')

"""**ii. Histograms**"""

import pandas as pd

df = pd.DataFrame({'col_name':[1,1,1.2,2,3,3.5,3.6,3.9,3.8,4,6,6,6,7,7.5]})

data = df['col_name']

hist_plot = data.plot.hist(bins=50, title='Histogram of Data')

"""**iii. Line plots**"""

import pandas as pd

df = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 4, 9, 16, 25]})

df.plot(x='x', y='y', kind='line')

"""**iv. Scatter plots**"""

import pandas as pd

df = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 4, 9, 16, 25]})

df.plot(x='x', y='y', kind='scatter')

"""**b) Write a program to demonstrate use of groupby() method**"""

import pandas as pd

df = pd.DataFrame({'Animal': ['Dog', 'Cat', 'Dog', 'Dog', 'Cat'],
                   'Color': ['White', 'Black', 'Black', 'White', 'Black'],
                   'Height': [12, 10, 14, 13, 11]})

grouped_df = df.groupby('Animal')

for name, group in grouped_df:
    print("Group name: ", name)
    print(group)
    print()

"""**c) Write a program to demonstrate pandas Merging, Joining and Concatenating**"""

import pandas as pd

df1 = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
                    'A': ['A0', 'A1', 'A2', 'A3'],
                    'B': ['B0', 'B1', 'B2', 'B3']})

df2 = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
                    'C': ['C0', 'C1', 'C2', 'C3'],
                    'D': ['D0', 'D1', 'D2', 'D3']})

df3 = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K4'],
                    'E': ['E0', 'E1', 'E2', 'E3'],
                    'F': ['F0', 'F1', 'F2', 'F3']})

print("\nMerging:")
merged_df = pd.merge(df1, df2, on='key')
print(merged_df)

print("\nInner join:")
inner_join_df = pd.merge(df1, df3, on='key', how='inner')
print(inner_join_df)

print("\nOuter join:")
outer_join_df = pd.merge(df1, df3, on='key', how='outer')
print(outer_join_df)

print("\nLeft join:")
left_join_df = pd.merge(df1, df3, on='key', how='left')
print(left_join_df)

print("\nRight join:")
right_join_df = pd.merge(df1, df3, on='key', how='right')
print(right_join_df)

print("\nConcatenating:")
concatenated_df = pd.concat([df1, df3], sort=False)
print(concatenated_df)

"""**d) Creating dataframes from csv and excel files.**"""

import pandas as pd
df = pd.read_csv('data.csv')

print(df)

"""# Week 9
## Object Oriented Programming: basic

**a) Write a Python class named Person with attributes name, age, weight (kgs), height (ft) and takes them through the constructor and exposes a method get_bmi_result() which returns one of "underweight", "healthy", "obese"**
"""

class Person:
    def __init__(self, name, age, weight, height):
        self.name = name
        self.age = age
        self.weight = weight
        self.height = height

    def get_bmi_result(self):
        bmi = self.weight / (self.height ** 2)

        if bmi < 18.5:
            return "underweight"
        elif bmi >= 18.5 and bmi < 25:
            return "healthy"
        else:
            return "obese"
p = Person("John", 30, 75, 1.75)
result = p.get_bmi_result()
print(result)

"""**b) Write a python program to demonstrate various kinds of inheritance.**

"""

class Vehicle:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def start_engine(self):
        print("It has engine")

class Car(Vehicle):
    def __init__(self, make, model,colour):
        self.make = make
        self.model = model
        self.colour = colour
    def Num_of_tyres(self):
        print("It has 4 tyres")

class bike(Vehicle):
    def __init__(self, make, model, colour):
        self.make = make
        self.model = model
        self.colour = colour
    def Num_of_tyres(self):
        print("It has 2 tyres")

c = Car("Honda", "Civic", "white")
c.Num_of_tyres()  # prints "Starting engine"

m = bike("Yamaha", "Activa", "black")
m.Num_of_tyres()  # prints "Starting engine"

"""# Week 10
##  Object Oriented Programming: advanced

**a) Write a python program to demonstrate operator overloading.**
"""

class Sample:
    def __init__(self, a):
        self.a=a
    def __add__(self, O):
        return self.a+O.a
    def __mul__(self, O):
        return self.a*O.a

print(3+5)
print(3*4)
print("CSE"*4)
s3 = Sample("Advanced ")
s4 = Sample("Python lab")
s1 = Sample(1)
s2 = Sample(5)

print(s1+s2)
print(s3+s4)

print(Sample.__add__(s1,s2))

print(s1*s2)
print(s2*s3)

"""**b) Write a python program to create abstract classes and abstract methods.**"""

from abc import ABC, abstractmethod
class shape(ABC):
    @abstractmethod
    def no_of_sides(self):
        pass
    def area(self):
        pass

class Triangle(shape):
    def no_of_sides(self):
        print("Triangle has 3 sides")
    def area(self):
        a = int(input("enter the heigt of triangle : "))
        b = int(input("enter the base of triangle : "))
        print("The area of triangle is ",(1/2)*a*b)
        print()

class Rectangle(shape):
    def no_of_sides(self):
        print("rectangle has 4 sides")
    def area(self):
        a = int(input("enter the length of rectangle : "))
        b = int(input("enter the breadth of rectangle : "))
        print("The area of triangle is ",(a*b))
        print()

class Circle(shape):
    def no_of_sides(self):
        print("circle has 0 sides")
    def area(self):
        a = int(input("enter the radius of circle : "))
        print("The area of circle is ",(a*a*3.14))
        print()   

c1 = Triangle()
c1.no_of_sides()
c1.area()

c2 = Rectangle()
c2.no_of_sides()
c2.area()

c3 = Circle()
c3.no_of_sides()
c3.area()

"""# Week 11(Lab Program 14)

**Write a Python program to print checkerboard pattern of nxn using numpy**
"""

from PIL import Image, ImageDraw

# Create a new image with a white background
image = Image.new("RGB", (200, 200), "white")
draw = ImageDraw.Draw(image)

# Draw the chessboard on the image
for i in range(8):
    for j in range(8):
        if (i + j) % 2 == 0:
            draw.rectangle([(i * 25, j * 25), (i * 25 + 25, j * 25 + 25)], fill="black")
image.save("chessboard.png")

"""# Week 12(Lab Program 17)

**Write a Python program using pandas that finds Missing Data and replace missing data.**
"""

import pandas as pd

# create a sample dataframe with missing values
df = pd.DataFrame({'A': [1, 2, 3, 4, 5, 6],
                   'B': [6, 7, 8, 9, None, 11],
                   'C': [None, 12, 13, 14, 15, 16]})

# display the dataframe
print(df)

# fill the missing values with any number
df = df.fillna(100)

# display the dataframe with missing values filled
print(df)